// <auto-generated />
using jannieCouture.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace jannieCouture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("jannieCouture.Models.AgeRange", b =>
                {
                    b.Property<int>("AgeRangeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("AgeRangeId");

                    b.ToTable("AgeRange");
                });

            modelBuilder.Entity("jannieCouture.Models.CartStatus", b =>
                {
                    b.Property<int>("CartStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("CartStatusID");

                    b.ToTable("CartStatus");
                });

            modelBuilder.Entity("jannieCouture.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("jannieCouture.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFeedback", b =>
                {
                    b.Property<int>("CustomerFeedbackId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Feedback");

                    b.Property<int?>("FeedbackStatusID");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("ParentFeedbackCustomerFeedbackId");

                    b.Property<int>("UserId");

                    b.HasKey("CustomerFeedbackId");

                    b.HasIndex("FeedbackStatusID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParentFeedbackCustomerFeedbackId");

                    b.ToTable("CustomerFeedback");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFeedbackResponse", b =>
                {
                    b.Property<int>("CustomerFeedbackResponseId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("ParentResponseCustomerFeedbackResponseId");

                    b.Property<string>("Response");

                    b.Property<int>("UserId");

                    b.HasKey("CustomerFeedbackResponseId");

                    b.HasIndex("ParentResponseCustomerFeedbackResponseId");

                    b.ToTable("CustomerFeedbackResponse");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFullfilment", b =>
                {
                    b.Property<int>("CustomerFullfilmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Note");

                    b.Property<int?>("RatedEntityID");

                    b.Property<int?>("RatingID");

                    b.Property<int?>("UserId");

                    b.Property<string>("email");

                    b.HasKey("CustomerFullfilmentId");

                    b.HasIndex("RatedEntityID");

                    b.HasIndex("RatingID");

                    b.ToTable("CustomerFullfilment");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerMaterial", b =>
                {
                    b.Property<int>("CustomerMaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateDelivered");

                    b.Property<DateTime>("DatePlaced");

                    b.Property<DateTime?>("ExpectedDeliveryDate");

                    b.Property<int?>("MaterialId");

                    b.Property<double>("Quantity");

                    b.HasKey("CustomerMaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("CustomerMaterial");
                });

            modelBuilder.Entity("jannieCouture.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactName");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("DeliveryStatusId");

                    b.Property<string>("LineAddress");

                    b.Property<string>("Note");

                    b.Property<int?>("StateId");

                    b.Property<string>("Town");

                    b.Property<int?>("UserId");

                    b.HasKey("DeliveryAddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("StateId");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("jannieCouture.Models.DeliveryClass", b =>
                {
                    b.Property<int>("DeliveryClassID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("DeliveryClassID");

                    b.ToTable("DeliveryClass");
                });

            modelBuilder.Entity("jannieCouture.Models.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cost");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("TimeToDeliver");

                    b.HasKey("DeliveryMethodId");

                    b.ToTable("DeliveryMethod");
                });

            modelBuilder.Entity("jannieCouture.Models.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("DeliveryStatusId");

                    b.ToTable("DeliveryStatus");
                });

            modelBuilder.Entity("jannieCouture.Models.Demography", b =>
                {
                    b.Property<int>("DemographyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("DemographyID");

                    b.ToTable("Demography");
                });

            modelBuilder.Entity("jannieCouture.Models.FeedbackStatus", b =>
                {
                    b.Property<int>("FeedbackStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("FeedbackStatusID");

                    b.ToTable("FeedbackStatus");
                });

            modelBuilder.Entity("jannieCouture.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MaterialCategoryID");

                    b.Property<double>("QuantityinStock");

                    b.Property<int?>("SKUID");

                    b.Property<double>("WarningQuantity");

                    b.HasKey("MaterialId");

                    b.HasIndex("MaterialCategoryID");

                    b.HasIndex("SKUID");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("jannieCouture.Models.MaterialCategory", b =>
                {
                    b.Property<int>("MaterialCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("MaterialCategoryID");

                    b.ToTable("MaterialCategory");
                });

            modelBuilder.Entity("jannieCouture.Models.MeasurementCategory", b =>
                {
                    b.Property<int>("MeasurementCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("MeasurementCategoryID");

                    b.ToTable("MeasurementCategory");
                });

            modelBuilder.Entity("jannieCouture.Models.MeasurementCategoryEntry", b =>
                {
                    b.Property<int>("MeasurementCategoryEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MeasurementCategoryID");

                    b.Property<int?>("MeasurementEntryID");

                    b.HasKey("MeasurementCategoryEntryId");

                    b.HasIndex("MeasurementCategoryID");

                    b.HasIndex("MeasurementEntryID");

                    b.ToTable("MeasurementCategoryEntry");
                });

            modelBuilder.Entity("jannieCouture.Models.MeasurementEntry", b =>
                {
                    b.Property<int>("MeasurementEntryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("MeasurementUnit");

                    b.Property<string>("Name");

                    b.HasKey("MeasurementEntryID");

                    b.ToTable("MeasurementEntry");
                });

            modelBuilder.Entity("jannieCouture.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Note");

                    b.Property<int?>("OrderPaymentID");

                    b.Property<string>("OrderSerial");

                    b.Property<int?>("ShoppingCartId");

                    b.Property<int>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderPaymentID")
                        .IsUnique();

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DeliveryClassID");

                    b.Property<string>("Notes");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("OrderStatusID");

                    b.Property<int?>("ShoppingCartItemId");

                    b.HasKey("OrderItemId");

                    b.HasIndex("DeliveryClassID");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("ShoppingCartItemId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemDeliveryAddress", b =>
                {
                    b.Property<int>("OrderItemDeliveryAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DeliveryAddressId");

                    b.Property<int?>("DeliveryMethodId");

                    b.Property<int?>("DeliveryStatusId");

                    b.Property<int?>("OrderItemId");

                    b.HasKey("OrderItemDeliveryAddressId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemDeliveryAddress");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemMeasurement", b =>
                {
                    b.Property<int>("OrderItemMeasurementId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeModified");

                    b.Property<int?>("OrderItemId");

                    b.HasKey("OrderItemMeasurementId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemMeasurement");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemMeasurementDetail", b =>
                {
                    b.Property<int>("OrderItemMeasurementDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MeasurementEntryID");

                    b.Property<int?>("OrderItemMeasurementId");

                    b.Property<string>("value");

                    b.HasKey("OrderItemMeasurementDetailId");

                    b.HasIndex("MeasurementEntryID");

                    b.HasIndex("OrderItemMeasurementId");

                    b.ToTable("OrderItemMeasurementDetail");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderPayment", b =>
                {
                    b.Property<int>("OrderPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Balance");

                    b.Property<double>("TotalPaid");

                    b.HasKey("OrderPaymentId");

                    b.ToTable("OrderPayment");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderPaymentHistory", b =>
                {
                    b.Property<int>("OrderPaymentHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("OrderItemId");

                    b.Property<int?>("OrderPaymentId");

                    b.Property<int?>("PaymentMethodId");

                    b.Property<int>("Userid");

                    b.HasKey("OrderPaymentHistoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderPaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("OrderPaymentHistory");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("jannieCouture.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("jannieCouture.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl");

                    b.Property<string[]>("MarketNames");

                    b.Property<string>("Name");

                    b.Property<string>("PriceCurrent");

                    b.Property<string>("PriceRange");

                    b.Property<int?>("ProductCategoryID");

                    b.Property<string[]>("Tags");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl");

                    b.Property<string[]>("MarketNames");

                    b.Property<string>("Name");

                    b.Property<string[]>("Tags");

                    b.HasKey("ProductCategoryID");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDeliveryClass", b =>
                {
                    b.Property<int>("ProductDeliveryClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DeliveryClassID");

                    b.Property<double>("PercentageAdded");

                    b.Property<int?>("ProductDetailID");

                    b.HasKey("ProductDeliveryClassId");

                    b.HasIndex("DeliveryClassID");

                    b.HasIndex("ProductDetailID");

                    b.ToTable("ProductDeliveryClass");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDemography", b =>
                {
                    b.Property<int>("ProductDemographyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DemographyID");

                    b.Property<int?>("ProductID");

                    b.Property<string>("value");

                    b.HasKey("ProductDemographyId");

                    b.HasIndex("DemographyID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductDemography");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetail", b =>
                {
                    b.Property<int>("ProductDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<string>("ImageUrl");

                    b.Property<string[]>("MarketNames");

                    b.Property<int?>("MeasurementCategorry");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductID");

                    b.HasKey("ProductDetailID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetailPrice", b =>
                {
                    b.Property<int>("ProductDetailPriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeRangeId");

                    b.Property<string>("Currency");

                    b.Property<double?>("Discount");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductDetailID");

                    b.Property<int?>("ProductDetailPriceHistoryId");

                    b.HasKey("ProductDetailPriceId");

                    b.HasIndex("AgeRangeId");

                    b.HasIndex("ProductDetailID");

                    b.HasIndex("ProductDetailPriceHistoryId")
                        .IsUnique();

                    b.ToTable("ProductDetailPrice");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetailPriceHistory", b =>
                {
                    b.Property<int>("ProductDetailPriceHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeRangeId");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateExpire");

                    b.Property<double?>("Discount");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductDetailID");

                    b.HasKey("ProductDetailPriceHistoryId");

                    b.HasIndex("AgeRangeId");

                    b.HasIndex("ProductDetailID");

                    b.ToTable("ProductDetailPriceHistory");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductTagID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ProductTagID");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("jannieCouture.Models.RatedEntity", b =>
                {
                    b.Property<int>("RatedEntityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("RatedEntityID");

                    b.ToTable("RatedEntity");
                });

            modelBuilder.Entity("jannieCouture.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("RatingID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("jannieCouture.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Numberitems");

                    b.Property<double>("TotalCost");

                    b.Property<int?>("USerId");

                    b.HasKey("ShoppingCartId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("jannieCouture.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CartStatusID");

                    b.Property<int?>("OrderId");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductDetailID");

                    b.Property<int>("Quantiy");

                    b.Property<int?>("ShoppingCartId");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("CartStatusID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailID");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("jannieCouture.Models.SKU", b =>
                {
                    b.Property<int>("SKUID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SKUID");

                    b.ToTable("SKU");
                });

            modelBuilder.Entity("jannieCouture.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("jannieCouture.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateFullfilled");

                    b.Property<DateTime?>("DatePlaced");

                    b.Property<int?>("MaterailMaterialId");

                    b.Property<double>("Quantity");

                    b.Property<int?>("SupplyRequestStatusId");

                    b.Property<int?>("VendorId");

                    b.HasKey("SupplyId");

                    b.HasIndex("MaterailMaterialId");

                    b.HasIndex("SupplyRequestStatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyPayment", b =>
                {
                    b.Property<int>("SupplyPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Balance");

                    b.Property<int?>("SupplyId");

                    b.Property<double>("TotalPaid");

                    b.HasKey("SupplyPaymentId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyPayment");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyPaymentHistory", b =>
                {
                    b.Property<int>("SupplyPaymentHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("PaymentMethodId");

                    b.Property<int?>("SupplyPaymentId");

                    b.Property<int>("Userid");

                    b.HasKey("SupplyPaymentHistoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplyPaymentId");

                    b.ToTable("SupplyPaymentHistory");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyReceived", b =>
                {
                    b.Property<int>("SupplyReceivedId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateReceived");

                    b.Property<double>("Quantity");

                    b.Property<int?>("SupplyId");

                    b.HasKey("SupplyReceivedId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyReceived");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyRequest", b =>
                {
                    b.Property<int>("SupplyRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateFullfilled");

                    b.Property<int?>("MaterialId");

                    b.Property<double>("Quantity");

                    b.Property<int?>("SupplyRequestStatusId");

                    b.HasKey("SupplyRequestId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SupplyRequestStatusId");

                    b.ToTable("SupplyRequest");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyRequestStatus", b =>
                {
                    b.Property<int>("SupplyRequestStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SupplyRequestStatusId");

                    b.ToTable("SupplyRequestStatus");
                });

            modelBuilder.Entity("jannieCouture.Models.UserCategory", b =>
                {
                    b.Property<int>("UserCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("UserCategoryID");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("jannieCouture.Models.UserLiveStream", b =>
                {
                    b.Property<int>("UserLiveStreamId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("IPAddress");

                    b.Property<int?>("UserId");

                    b.Property<string>("email");

                    b.Property<string>("link");

                    b.HasKey("UserLiveStreamId");

                    b.ToTable("UserLiveStream");
                });

            modelBuilder.Entity("jannieCouture.Models.UserMeasurement", b =>
                {
                    b.Property<int>("UserMeasurementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MeasurementEntryID");

                    b.Property<int>("UserID");

                    b.Property<string>("value");

                    b.HasKey("UserMeasurementId");

                    b.HasIndex("MeasurementEntryID");

                    b.ToTable("UserMeasurement");
                });

            modelBuilder.Entity("jannieCouture.Models.UserMeasurementHistory", b =>
                {
                    b.Property<int>("UserMeasurementHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("MeasurementEntryID");

                    b.Property<int>("UserID");

                    b.Property<int?>("UserMeasurementId");

                    b.Property<string>("value");

                    b.HasKey("UserMeasurementHistoryId");

                    b.HasIndex("MeasurementEntryID");

                    b.HasIndex("UserMeasurementId");

                    b.ToTable("UserMeasurementHistory");
                });

            modelBuilder.Entity("jannieCouture.Models.UserMeta", b =>
                {
                    b.Property<int>("UserMetaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("Religion");

                    b.Property<string>("email");

                    b.HasKey("UserMetaId");

                    b.ToTable("UserMeta");
                });

            modelBuilder.Entity("jannieCouture.Models.UserSocialLink", b =>
                {
                    b.Property<int>("UserSocialLinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SocialMediaBrand");

                    b.Property<string>("Username");

                    b.HasKey("UserSocialLinkId");

                    b.ToTable("UserSocialLink");
                });

            modelBuilder.Entity("jannieCouture.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressDeliveryAddressId");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<int?>("RatingID");

                    b.HasKey("VendorId");

                    b.HasIndex("AddressDeliveryAddressId");

                    b.HasIndex("RatingID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("jannieCouture.Models.VendorFeedback", b =>
                {
                    b.Property<int>("VendorFeedbackId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Feedback");

                    b.Property<int?>("FeedbackStatusID");

                    b.Property<int?>("ParentFeedbackVendorFeedbackId");

                    b.Property<int?>("SupplyId");

                    b.Property<int?>("VendorId");

                    b.HasKey("VendorFeedbackId");

                    b.HasIndex("FeedbackStatusID");

                    b.HasIndex("ParentFeedbackVendorFeedbackId");

                    b.HasIndex("SupplyId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorFeedback");
                });

            modelBuilder.Entity("jannieCouture.Models.VendorFeedbackResponse", b =>
                {
                    b.Property<int>("VendorFeedbackResponseId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("ParentResponseVendorFeedbackResponseId");

                    b.Property<string>("Response");

                    b.Property<int?>("VendorId");

                    b.HasKey("VendorFeedbackResponseId");

                    b.HasIndex("ParentResponseVendorFeedbackResponseId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorFeedbackResponse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("jannieCouture.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("UserCategoryID");

                    b.Property<int?>("UserMetaId");

                    b.HasIndex("UserCategoryID");

                    b.HasIndex("UserMetaId");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFeedback", b =>
                {
                    b.HasOne("jannieCouture.Models.FeedbackStatus", "FeedbackStatus")
                        .WithMany()
                        .HasForeignKey("FeedbackStatusID");

                    b.HasOne("jannieCouture.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("jannieCouture.Models.CustomerFeedback", "ParentFeedback")
                        .WithMany()
                        .HasForeignKey("ParentFeedbackCustomerFeedbackId");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFeedbackResponse", b =>
                {
                    b.HasOne("jannieCouture.Models.CustomerFeedbackResponse", "ParentResponse")
                        .WithMany()
                        .HasForeignKey("ParentResponseCustomerFeedbackResponseId");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerFullfilment", b =>
                {
                    b.HasOne("jannieCouture.Models.RatedEntity", "RatedEntity")
                        .WithMany("CustomerFullfilments")
                        .HasForeignKey("RatedEntityID");

                    b.HasOne("jannieCouture.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingID");
                });

            modelBuilder.Entity("jannieCouture.Models.CustomerMaterial", b =>
                {
                    b.HasOne("jannieCouture.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("jannieCouture.Models.DeliveryAddress", b =>
                {
                    b.HasOne("jannieCouture.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("jannieCouture.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusId");

                    b.HasOne("jannieCouture.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("jannieCouture.Models.Material", b =>
                {
                    b.HasOne("jannieCouture.Models.MaterialCategory", "MaterialCategory")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialCategoryID");

                    b.HasOne("jannieCouture.Models.SKU", "SKU")
                        .WithMany()
                        .HasForeignKey("SKUID");
                });

            modelBuilder.Entity("jannieCouture.Models.MeasurementCategoryEntry", b =>
                {
                    b.HasOne("jannieCouture.Models.MeasurementCategory", "MeasurementCategory")
                        .WithMany("MeasurementCategoryEntries")
                        .HasForeignKey("MeasurementCategoryID");

                    b.HasOne("jannieCouture.Models.MeasurementEntry", "MeasurementEntry")
                        .WithMany()
                        .HasForeignKey("MeasurementEntryID");
                });

            modelBuilder.Entity("jannieCouture.Models.Order", b =>
                {
                    b.HasOne("jannieCouture.Models.OrderPayment", "OrderPayment")
                        .WithOne("Order")
                        .HasForeignKey("jannieCouture.Models.Order", "OrderPaymentID");

                    b.HasOne("jannieCouture.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItem", b =>
                {
                    b.HasOne("jannieCouture.Models.DeliveryClass", "DeliveryClass")
                        .WithMany()
                        .HasForeignKey("DeliveryClassID");

                    b.HasOne("jannieCouture.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("jannieCouture.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusID");

                    b.HasOne("jannieCouture.Models.ShoppingCartItem", "ShoppingCartItem")
                        .WithMany()
                        .HasForeignKey("ShoppingCartItemId");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemDeliveryAddress", b =>
                {
                    b.HasOne("jannieCouture.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("jannieCouture.Models.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("jannieCouture.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusId");

                    b.HasOne("jannieCouture.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemMeasurement", b =>
                {
                    b.HasOne("jannieCouture.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderItemMeasurementDetail", b =>
                {
                    b.HasOne("jannieCouture.Models.MeasurementEntry", "MeasurementEntry")
                        .WithMany()
                        .HasForeignKey("MeasurementEntryID");

                    b.HasOne("jannieCouture.Models.OrderItemMeasurement", "OrderItemMeasurement")
                        .WithMany("OrderItemMeasurementDetails")
                        .HasForeignKey("OrderItemMeasurementId");
                });

            modelBuilder.Entity("jannieCouture.Models.OrderPaymentHistory", b =>
                {
                    b.HasOne("jannieCouture.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("jannieCouture.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId");

                    b.HasOne("jannieCouture.Models.OrderPayment", "OrderPayment")
                        .WithMany("OrderPaymentHistory")
                        .HasForeignKey("OrderPaymentId");

                    b.HasOne("jannieCouture.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("OrderPaymentHistories")
                        .HasForeignKey("PaymentMethodId");
                });

            modelBuilder.Entity("jannieCouture.Models.Product", b =>
                {
                    b.HasOne("jannieCouture.Models.ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryID");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDeliveryClass", b =>
                {
                    b.HasOne("jannieCouture.Models.DeliveryClass", "DeliveryClass")
                        .WithMany()
                        .HasForeignKey("DeliveryClassID");

                    b.HasOne("jannieCouture.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailID");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDemography", b =>
                {
                    b.HasOne("jannieCouture.Models.Demography", "Demography")
                        .WithMany()
                        .HasForeignKey("DemographyID");

                    b.HasOne("jannieCouture.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetail", b =>
                {
                    b.HasOne("jannieCouture.Models.Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetailPrice", b =>
                {
                    b.HasOne("jannieCouture.Models.AgeRange", "AgeRange")
                        .WithMany()
                        .HasForeignKey("AgeRangeId");

                    b.HasOne("jannieCouture.Models.ProductDetail", "ProductDetail")
                        .WithMany("ProductDetailPrices")
                        .HasForeignKey("ProductDetailID");

                    b.HasOne("jannieCouture.Models.ProductDetailPriceHistory", "ProductDetailPriceHistory")
                        .WithOne("ProductDetailPriceId")
                        .HasForeignKey("jannieCouture.Models.ProductDetailPrice", "ProductDetailPriceHistoryId");
                });

            modelBuilder.Entity("jannieCouture.Models.ProductDetailPriceHistory", b =>
                {
                    b.HasOne("jannieCouture.Models.AgeRange", "AgeRange")
                        .WithMany()
                        .HasForeignKey("AgeRangeId");

                    b.HasOne("jannieCouture.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailID");
                });

            modelBuilder.Entity("jannieCouture.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("jannieCouture.Models.CartStatus", "CartStatus")
                        .WithMany()
                        .HasForeignKey("CartStatusID");

                    b.HasOne("jannieCouture.Models.Order")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("jannieCouture.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailID");

                    b.HasOne("jannieCouture.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("jannieCouture.Models.State", b =>
                {
                    b.HasOne("jannieCouture.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("jannieCouture.Models.Supply", b =>
                {
                    b.HasOne("jannieCouture.Models.Material", "Materail")
                        .WithMany()
                        .HasForeignKey("MaterailMaterialId");

                    b.HasOne("jannieCouture.Models.SupplyRequestStatus", "SupplyRequestStatus")
                        .WithMany()
                        .HasForeignKey("SupplyRequestStatusId");

                    b.HasOne("jannieCouture.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyPayment", b =>
                {
                    b.HasOne("jannieCouture.Models.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyPaymentHistory", b =>
                {
                    b.HasOne("jannieCouture.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("jannieCouture.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("jannieCouture.Models.SupplyPayment", "SupplyPayment")
                        .WithMany("SupplyPaymentHistory")
                        .HasForeignKey("SupplyPaymentId");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyReceived", b =>
                {
                    b.HasOne("jannieCouture.Models.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId");
                });

            modelBuilder.Entity("jannieCouture.Models.SupplyRequest", b =>
                {
                    b.HasOne("jannieCouture.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("jannieCouture.Models.SupplyRequestStatus", "SupplyRequestStatus")
                        .WithMany()
                        .HasForeignKey("SupplyRequestStatusId");
                });

            modelBuilder.Entity("jannieCouture.Models.UserMeasurement", b =>
                {
                    b.HasOne("jannieCouture.Models.MeasurementEntry", "MeasurementEntry")
                        .WithMany()
                        .HasForeignKey("MeasurementEntryID");
                });

            modelBuilder.Entity("jannieCouture.Models.UserMeasurementHistory", b =>
                {
                    b.HasOne("jannieCouture.Models.MeasurementEntry", "MeasurementEntry")
                        .WithMany()
                        .HasForeignKey("MeasurementEntryID");

                    b.HasOne("jannieCouture.Models.UserMeasurement")
                        .WithMany("UserMeasurementHistory")
                        .HasForeignKey("UserMeasurementId");
                });

            modelBuilder.Entity("jannieCouture.Models.Vendor", b =>
                {
                    b.HasOne("jannieCouture.Models.DeliveryAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressDeliveryAddressId");

                    b.HasOne("jannieCouture.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingID");
                });

            modelBuilder.Entity("jannieCouture.Models.VendorFeedback", b =>
                {
                    b.HasOne("jannieCouture.Models.FeedbackStatus", "FeedbackStatus")
                        .WithMany()
                        .HasForeignKey("FeedbackStatusID");

                    b.HasOne("jannieCouture.Models.VendorFeedback", "ParentFeedback")
                        .WithMany()
                        .HasForeignKey("ParentFeedbackVendorFeedbackId");

                    b.HasOne("jannieCouture.Models.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId");

                    b.HasOne("jannieCouture.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("jannieCouture.Models.VendorFeedbackResponse", b =>
                {
                    b.HasOne("jannieCouture.Models.VendorFeedbackResponse", "ParentResponse")
                        .WithMany()
                        .HasForeignKey("ParentResponseVendorFeedbackResponseId");

                    b.HasOne("jannieCouture.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("jannieCouture.Models.ApplicationUser", b =>
                {
                    b.HasOne("jannieCouture.Models.UserCategory", "UserCategory")
                        .WithMany()
                        .HasForeignKey("UserCategoryID");

                    b.HasOne("jannieCouture.Models.UserMeta", "UserMeta")
                        .WithMany()
                        .HasForeignKey("UserMetaId");
                });
#pragma warning restore 612, 618
        }
    }
}
